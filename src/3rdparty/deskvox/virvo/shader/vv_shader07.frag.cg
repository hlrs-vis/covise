// Shader for 3-channel data sets and opacity weighted alpha blending

// Authors: 
//  Alexander Rice <acrice@cs.brown.edu>
//  Jurgen Schulze <schulze@cs.brown.edu>

struct PixelIn 
{
  float3 coord3d : TEXCOORD0;
};

float4 main(
  const sampler3D  in uniform pix3dtex : TEXTURE0,
  const sampler2D  in uniform pixLUT,
  const float4     in uniform opWeights,        // opacity of four channels
        PixelIn    in IN) : COLOR0
{
  float4 origColor = tex3D(pix3dtex, IN.coord3d);
  float4 OUT;
  OUT.r = tex2D(pixLUT, float2(origColor.r, 0)).r;
  OUT.g = tex2D(pixLUT, float2(origColor.g, 0)).g;
  OUT.b = tex2D(pixLUT, float2(origColor.b, 0)).b;

  float maxColor = max(OUT.r, max(OUT.g, OUT.b));
  if      (maxColor==OUT.r) OUT.a = OUT.r * opWeights.r;
  else if (maxColor==OUT.g) OUT.a = OUT.g * opWeights.g;
  else                      OUT.a = OUT.b * opWeights.b;

  return OUT;
}
// vim: sw=2:expandtab:softtabstop=2:ts=2:cino=\:0g0t0
